Create custom shared secret which is stored in keychain.

DESKTOP-APP creates secret in keychain.
DESKTOP-APP and EXTENSION uses it as password for the REST.

App-Passwords, which can access user passwords from other apps?
=> only if approved.

https://www.reddit.com/r/javascript/comments/8txe2q/how_to_securely_store_an_api_token_in_a_chrome/
https://developers.google.com/web/fundamentals/security/credential-management

Extension asks app via HTTPS.
both shows random visual secure code.
after confirming, the credentials are exchanged and 
stored in keychain and chrome credential Management API store.

local storage (unencrypted is sufficient, if cookies are stored similairy unencrypted.)

Cookies are stored encrypted => Extension stores value also as cookie

https://medium.com/how-to-electron/a-complete-guide-to-packaging-your-electron-app-1bdc717d739f
https://www.icoconverter.com/
https://cloudconvert.com/png-to-icns

* app signature for keychain hoa determind access? => Mac only for registered app => Windows open


* basic auth only for certain paths => no problem / Done
* Store crowd token encrypted && credentials => Done
* encrypt with crowd password => Done

* update config and liveconfig for crowd extension


* Adde nore errormessages e.g. no final configs
* Refactor: service for rest paths, constants, etc.
* Make public repo for releases and nested private git repo for source code
* add async / promises
* Node debugger
* builds
* drone files

* fix tray icon => Done
* fix local ssl certificate trust => Done => Accepting in Browser not in certificate store
* fix quitting in app => Done
* Change name and version for app => Done, partly
* Add commandline toggle for dev tools

Local sockets on ports cannot be intercepted => If port is not available - no connection possible. 
But socket must be bound to 127.0.0.1, not localhost to prevent dns redirection also via hosts file.
=> But SSL is generally better, since original application must not be checked if it is really running and not a fake app.